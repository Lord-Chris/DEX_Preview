class TickerData {
  String eventType;
  int eventTime;
  int transactionTime;
  String optionSymbol;
  double openingPrice;
  double highestPrice;
  double lowestPrice;
  double latestPrice;
  double tradingVolume;
  double tradeAmount;
  double priceChangePercent;
  double priceChange;
  double volumeLastTrade;
  int firstTradeId;
  int lastTradeId;
  int numberOfTrades;
  double bestBuyPrice;
  double bestSellPrice;
  double bestBuyQuantity;
  double bestSellQuantity;
  double buyImpliedVolatility;
  double sellImpliedVolatility;
  double delta;
  double theta;
  double gamma;
  double vega;
  double impliedVolatility;
  double markPrice;
  double buyMaximumPrice;
  double sellMinimumPrice;
  int estimatedStrikePrice;

  TickerData({
    required this.eventType,
    required this.eventTime,
    required this.transactionTime,
    required this.optionSymbol,
    required this.openingPrice,
    required this.highestPrice,
    required this.lowestPrice,
    required this.latestPrice,
    required this.tradingVolume,
    required this.tradeAmount,
    required this.priceChangePercent,
    required this.priceChange,
    required this.volumeLastTrade,
    required this.firstTradeId,
    required this.lastTradeId,
    required this.numberOfTrades,
    required this.bestBuyPrice,
    required this.bestSellPrice,
    required this.bestBuyQuantity,
    required this.bestSellQuantity,
    required this.buyImpliedVolatility,
    required this.sellImpliedVolatility,
    required this.delta,
    required this.theta,
    required this.gamma,
    required this.vega,
    required this.impliedVolatility,
    required this.markPrice,
    required this.buyMaximumPrice,
    required this.sellMinimumPrice,
    required this.estimatedStrikePrice,
  });

  factory TickerData.fromJson(Map<String, dynamic> json) {
    return TickerData(
      eventType: json['e'],
      eventTime: json['E'],
      transactionTime: json['T'],
      optionSymbol: json['s'],
      openingPrice: double.parse(json['o']),
      highestPrice: double.parse(json['h']),
      lowestPrice: double.parse(json['l']),
      latestPrice: double.parse(json['c']),
      tradingVolume: double.parse(json['V']),
      tradeAmount: double.parse(json['A']),
      priceChangePercent: double.parse(json['P']),
      priceChange: double.parse(json['p']),
      volumeLastTrade: double.parse(json['Q']),
      firstTradeId: int.parse(json['F']),
      lastTradeId: int.parse(json['L']),
      numberOfTrades: json['n'],
      bestBuyPrice: double.parse(json['bo']),
      bestSellPrice: double.parse(json['ao']),
      bestBuyQuantity: double.parse(json['bq']),
      bestSellQuantity: double.parse(json['aq']),
      buyImpliedVolatility: double.parse(json['b']),
      sellImpliedVolatility: double.parse(json['a']),
      delta: double.parse(json['d']),
      theta: double.parse(json['t']),
      gamma: double.parse(json['g']),
      vega: double.parse(json['v']),
      impliedVolatility: double.parse(json['vo']),
      markPrice: double.parse(json['mp']),
      buyMaximumPrice: double.parse(json['hl']),
      sellMinimumPrice: double.parse(json['ll']),
      estimatedStrikePrice: int.parse(json['eep']),
    );
  }
}
